
name: Create Production Release
on:
  workflow_dispatch: {}
  # pull_request_target:
  #   types:
  #     - closed
  #   branches:
  #     - main

permissions:
  id-token: write
  contents: write

concurrency:
  cancel-in-progress: true
  group: report-server-build-app-prod

jobs:
  Allow_Run:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Check Branch
        run: |
          if [[ ${{ github.event.pull_request.head.ref }} == 'release/'* ]]; then
            echo "Branch is valid to deploy a production image. Proceeding ..."
          else
            echo "Branch don't match production branch pattern."
            exit 1
          fi
  Tagging:
    runs-on: ubuntu-latest
    needs: Allow_Run
    outputs:
      release_tag: ${{ steps.tag.outputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      
      - name: Get Release Tag
        id: tag
        run: |
          echo release_tag="$(echo ${{ github.event.pull_request.head.ref }} | sed 's/release\///g')" >> $GITHUB_OUTPUT

      - name: Get Latest Release
        run: |
          echo LATEST_RELEASE="$(git tag -l --sort=creatordate | tee | grep -v rc | tail -n 1)" >> $GITHUB_ENV

      - name: Push tag to Repository
        run: |
          git config --global user.name "Automated User"
          git config --global user.email "automateduser@mindlogger"
          git tag ${{ steps.tag.outputs.release_tag }}
          git push origin ${{ steps.tag.outputs.release_tag }}
      
      - name: Generate Release Notes
        run: |
          RELEASE_NOTES=$(gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository }}/releases/generate-notes \
          -f "tag_name=${{ steps.tag.outputs.release_tag }}" -f "target_commitish=main" -f "previous_tag_name=${{ env.LATEST_RELEASE }}" | jq -r .'body' | sed 's/\\n/\n/g')

          gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository }}/releases \
          -f "tag_name=${{ steps.tag.outputs.release_tag }}" -f "target_commitish=main" -f "name=${{ steps.tag.outputs.release_tag }}" -f "body=$RELEASE_NOTES" -F "prerelease=false"
        env:
          GH_TOKEN: ${{ github.token }}

  App_Build:
    name: Production Release
    uses: ./.github/workflows/build_push.yaml
    needs: Tagging
    with:
      repo-name: test-repo
      tag: ${{ needs.Tagging.outputs.release_tag }}

  Deploy:
    needs: App_Build
    name: Deploy to Prod
    runs-on: ubuntu-latest
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::410431445687:role/cmiml-dev-oidc-github-role
          role-session-name: OIDC-GHA-session
          aws-region: us-east-1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition report_server --query taskDefinition > task-definition.json

      - name: Render Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: report_server
          image: ${{ needs.App_Build.outputs.image }}

      - name: Update Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: report-server
          cluster: cmiml-prod
          wait-for-service-stability: true
  Failed-Notification:
    needs:
      - App_Build
      - Deploy
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Format Slack Message (Failed)
        if: failure()
        run: |
          sed -i "s|\${APP}|Report Server|g" .github/configs/failed_deploy.json
          sed -i "s|\${ENVIRONMENT}|dev|g" .github/configs/failed_deploy.json
          sed -i "s|\${IMAGE}|${{ needs.App_Build.outputs.short-image }}|g" .github/configs/failed_deploy.json

          echo JSON_PAYLOAD=$(cat .github/configs/failed_deploy.json) >> $GITHUB_ENV
        shell: bash
      - name: Send Slack Message
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            ${{ env.JSON_PAYLOAD }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CODE_GURU_REPORTS_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  
  Success-Notification:
    needs:
      - App_Build
      - Deploy
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Format Slack Message (Success)
        run: |
          sed -i "s|\${APP}|Report Server|g" .github/configs/successful_deploy.json
          sed -i "s|\${ENVIRONMENT}|dev|g" .github/configs/successful_deploy.json
          sed -i "s|\${IMAGE}|${{ needs.App_Build.outputs.short-image }}|g" .github/configs/successful_deploy.json

          echo JSON_PAYLOAD=$(cat .github/configs/successful_deploy.json) >> $GITHUB_ENV
        shell: bash
      - name: Send Slack Message
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            ${{ env.JSON_PAYLOAD }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CODE_GURU_REPORTS_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK